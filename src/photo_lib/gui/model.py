import datetime
from typing import List, Union

from photo_lib.PhotoDatabase import PhotoDb, DatabaseEntry
from photo_lib.metadataagregator import key_lookup_dir

class Model:
    pdb: PhotoDb = None
    files: List[DatabaseEntry]
    current_row: Union[int, None] = None

    def __init__(self):
        self.pdb = PhotoDb(root_dir="/media/alisot2000/DumpStuff/Photo_Library_Testing/")


    @staticmethod
    def process_metadata(metadict: dict):
        """
        Parse the Metadata dict and convert it into a text string that can be displayed.

        :param metadict: dictionary of metadata, generated by the exiftool

        :return: metadata string, file size string
        """
        keys = metadict.keys()
        key_list = list(keys)
        key_list.sort()
        file_size = ""

        result = f"Number of Attributes: {len(key_list)}\n"

        for key in key_list:
            result += f"{key}: {metadict.get(key)}\n"
            if key == "File:FileSize":
                file_size = f"File Size: {int(metadict.get(key)):,}".replace(",", "'")

        return result, file_size

    def try_rename_image(self, tag: str, dbe: DatabaseEntry, custom_datetime: str = None):
        """
        Perform the renaming logic on the badkend. This will update the database entry, and rename the file.
        :param tag: new tag to be used for datetime
        :param dbe: databse entry
        :param custom_datetime: the custom datetime string, if tag is "custom"
        :return:
        """
        if tag.strip().lower() == "custom":
            tag = "Custom"
            new_datetime = datetime.datetime.strptime(custom_datetime, "%Y-%m-%d %H.%M.%S")

        else:
            parsing_function = key_lookup_dir.get(tag)

            if parsing_function is None:
                raise ValueError(f"Tag {tag} does not have a matching parsing function.")

            new_datetime, key = parsing_function(dbe.metadata)

        if new_datetime == dbe.datetime:
            print("Equivalent Datetime, exiting")
            return

        # print(new_datetime)

        # Update the Database entry
        dbe.new_name = self.pdb.rename_file(entry=dbe, new_datetime=new_datetime, naming_tag=tag)
        dbe.datetime = new_datetime
        dbe.naming_tag = tag

